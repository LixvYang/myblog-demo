const n=JSON.parse(`{"key":"v-235f01c3","path":"/posts/golang/tool/grpc/4.html","title":"GRPC教程 4 - GRPC-Gateway教程与Transcoding","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2023-03-29T00:00:00.000Z","isOriginal":true,"category":["tutorial"],"tag":["golang","grpc"]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":4.31,"words":1294},"filePathRelative":"posts/golang/tool/grpc/4.md","localizedDate":"2023年3月29日","excerpt":"<h1> GRPC教程 4 - GRPC-Gateway教程与Transcoding</h1>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>GRPC-Gateway是protoc的一个插件，类似protoc-gen-go和protoc-gen-go-grpc插件，前者是生成.pb.go后者是生成.grpc.pb.go文件。\\n::</p>\\n<p>那么这两个插件是帮助proto文件生成go语言的插件，那么GRPC-Gateway呢，它是一个可以根据proto文件的定义生成一个反向代理器的，服务器可以将 RESTful JSON API 转换为 GRPC。</p>\\n<p>这里你会有三个疑惑？什么是反向代理器？为什么要根据proto文件生成反向代理器？为什么要将RESTful JSON API转换成GRPC？</p>\\n<p>其实这一个图就可以解释\\n<img src=\\"https://ts1.cn.mm.bing.net/th/id/R-C.37541e0178c028842f13f773275f5cb3?rik=rZAPx2ssc92Fpg&amp;pid=ImgRaw&amp;r=0\\" alt=\\"\\" loading=\\"lazy\\"></p>\\n<h2> 基本示例</h2>\\n<p>我们继续使用我们一开始的hello.proto文件来做示例</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code>├── client\\n│   ├── go.mod\\n│   ├── main.go\\n│   └── pb\\n│       ├── hello_grpc.pb.go\\n│       ├── hello.pb.go\\n│       └── hello.proto\\n├── go.work\\n└── server\\n    ├── go.mod\\n    ├── go.sum\\n    ├── main.go\\n    └── pb\\n        ├── hello_grpc.pb.go\\n        ├── hello.pb.go\\n        └── hello.proto\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>这次我们发现我们每次调用server进程下的服务，每次都需要重新定义一个客户端再去调用，那能不能说，就是像gin这种框架一样，使用简单的JSON body请求就可以请求GRPC呢，这就是grpc gateway的作用了，我们来演示一下怎么来用grpc-gateway。</p>\\n<p>首先添加 gRPC-Gateway 注释，这些注释定义了我们GRPC服务如何映射为JSON的请求和响应。使用protobuf的时候，GRPC service必须用google.api.HTTP来定义。</p>\\n<p>这里我用POST /v1/hello 来 映射到 Hello 的GRPC服务。</p>\\n<p>修改后的service Greeter是这样</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token string\\">\\"google/api/annotations.proto\\"</span><span class=\\"token punctuation\\">;</span>\\n\\nservice Greetering <span class=\\"token punctuation\\">{</span>\\n  rpc Hello <span class=\\"token punctuation\\">(</span>HelloReq<span class=\\"token punctuation\\">)</span> returns <span class=\\"token punctuation\\">(</span>HelloResp<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    option <span class=\\"token punctuation\\">(</span>google<span class=\\"token punctuation\\">.</span>api<span class=\\"token punctuation\\">.</span>http<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n      post<span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"/api/v1/hello\\"</span>\\n      body<span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"*\\"</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>在这里  google/api/annotations.proto 却是在go/include/下，也就是我们下载proto时，解压下来的文件夹。和include 同一目录。所以我们需要去跟github上去下载。</p>\\n<p><a href=\\"https://github.com/googleapis/googleapis/tree/master/google/api\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/googleapis/googleapis/tree/master/google/api</a></p>\\n<p>随后需要重新加上grpc-gateway插件器创建对应的pb.gw.go文件。</p>\\n<p>在这里你需要下载grpc-gateway</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative --grpc-gateway_out=. --grpc-gateway_opt=paths=source_relative pb/hello.proto \\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>现在我们开始编写main.go，我们加入gateway的方式就是新起一个goroutine 去开启gateway代理</p>\\n<div class=\\"language-go line-numbers-mode\\" data-ext=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">go</span> <span class=\\"token keyword\\">func</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\n\\t\\tconn<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> grpc<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">DialContext</span><span class=\\"token punctuation\\">(</span>\\n\\t\\t\\tcontext<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Background</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t\\t<span class=\\"token string\\">\\"0.0.0.0:7890\\"</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t\\tgrpc<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WithBlock</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t\\tgrpc<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">WithTransportCredentials</span><span class=\\"token punctuation\\">(</span>insecure<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewCredentials</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalln</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Failed to dial server:\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t\\tgwmux <span class=\\"token operator\\">:=</span> runtime<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewServeMux</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t\\terr <span class=\\"token operator\\">=</span> pb<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RegisterGreeteringHandler</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Background</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> gwmux<span class=\\"token punctuation\\">,</span> conn<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalln</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Failed to register gateway:\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t\\tgwServer <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&amp;</span>http<span class=\\"token punctuation\\">.</span>Server<span class=\\"token punctuation\\">{</span>\\n\\t\\t\\tAddr<span class=\\"token punctuation\\">:</span>    <span class=\\"token string\\">\\":8090\\"</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t\\tHandler<span class=\\"token punctuation\\">:</span> gwmux<span class=\\"token punctuation\\">,</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t<span class=\\"token comment\\">// 8090端口提供gRPC-Gateway服务</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Serving gRPC-Gateway on http://0.0.0.0:8090\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t\\tlog<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Fatalln</span><span class=\\"token punctuation\\">(</span>gwServer<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ListenAndServe</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>接着我们用curl脚本命令，或者电脑上可以下载下postman去测试一下。</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>curl -X POST http://127.0.0.1:8090/api/v1/hello '{\\"name\\": \\"Lixin\\"}'\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><h2> Transcoding</h2>\\n<p>下面接着来讲一下更多的匹配规则，在上个例子中，我们并没有讲解更多的路径匹配，比如<code>/api/:name</code>或者传递query参数，我们来讲解一下这样的方式</p>\\n<p>首先我们先修改一下对应之前的pb/hello.proto</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>message HelloReq {\\n  string name = 1;\\n  int64 age = 2;\\n  string msg = 3;\\n}\\n\\nmessage HelloResp {\\n  string msg = 1;\\n}\\n\\nservice Greetering {\\n  rpc Hello (HelloReq) returns (HelloResp) {\\n    option (google.api.http) = {\\n      get: \\"/api/v1/hello/{name}\\"\\n    };\\n  };\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>来方便我们进行查看如何去使用http transcoding 规则查询。</p>\\n<p>我们再次进行编码 <code>protoc ...</code>,  运行服务</p>\\n<p>接着启动服务，用curl去测试一下</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>curl --location 'http://127.0.0.1:8090/api/v1/hello/lixin'\\n\\n{\\"msg\\":\\"0 / lixin /  Hello\\"}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>可以看到获取到了对应的name字段，那如果我们传入query参数呢？</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>curl --location 'http://127.0.0.1:8090/api/v1/hello/lixin?age=12'\\n\\n{\\"msg\\":\\"12 / lixin /  Hello\\"}\\n\\ncurl --location 'http://127.0.0.1:8090/api/v1/hello/lixin?age=12&amp;msg=message'\\n{\\"msg\\":\\"12 / lixin / message Hello\\"} \\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>可以看到，我们这样就可以给http 路由传递 query参数去访问对应的grpc服务。</p>\\n<p>那还有没有别的用法？,我们继续修改proto文件  <code>get: \\"/api/v1/hello/{name=names/*}\\"</code>, 接着我们传递</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>curl --location 'http://127.0.0.1:8090/api/v1/hello/names/lixin?age=12&amp;msg=message'\\n\\n{\\"msg\\": \\"12 / names/lixin / message Hello\\"}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>可以看到我们修改了对应的:name为{names/*}，这样我们就让<code>names/lixin</code>顺利传递给了name参数。</p>\\n<p>接下来，我们看看body的用法，我们一般不会用get方法去传递body，所以下面我们接着再来修改一下proto文件，让对应的http 方法称为post，然后加上body参数。</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>service Greetering {\\n  rpc Hello (HelloReq) returns (HelloResp) {\\n    option (google.api.http) = {\\n      post: \\"/api/v1/hello/{name}\\"\\n      body: \\"msg\\"\\n    };\\n  };\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>我们再来观察一下这个option里面的东西，post路径为<code>/api/v1/hello/{name}</code>, 这意味着，我们可以给path传递name，然后给body传递msg参数，那剩下的age呢？我们可以用query路径传递进去，就是这样</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>message HelloReq {\\n  string name = 1;   // path \\n  int64 age = 2; // query  \\n  string msg = 3; // body\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>curl --location 'http://127.0.0.1:8090/api/v1/hello/lixin?age=12' \\\\\\n--header 'Content-Type: text/plain' \\\\\\n--data '\\"eeeesae\\"'\\n\\n{ \\"msg\\": \\"12 / lixin / eeeesae Hello\\"}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>可以看到我们传递的data，就是对应到msg参数里面的。</p>\\n<p>下面我们再修改一下proto文件, 将body修改为*</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>service Greetering {\\n  rpc Hello (HelloReq) returns (HelloResp) {\\n    option (google.api.http) = {\\n      post: \\"/api/v1/hello/{name}\\"\\n      body: \\"*\\"\\n    };\\n  };\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>重新生成gw.go <code>protoc ...</code></p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>curl --location 'http://127.0.0.1:8090/api/v1/hello/lixin?age=12' \\\\\\n--header 'Content-Type: application/json' \\\\\\n--data '{\\n    \\"name\\": \\"Lixinsss\\",\\n    \\"age\\": 21,\\n    \\"msg\\": \\"This is a message.\\"\\n}'\\n\\n可以看到，虽然body是*, 但是body里面只有传递age和msg有效，当body是*时，query参数就没有效果了。\\n{\\"msg\\": \\"21 / lixin / This is a message. Hello\\"}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>总结</p>\\n<p>我们本篇文章，主要是介绍了GRPC-Gateway,下载gatwway插件，学习使用gateway,并且学习了传递HTTP的多种方式</p>\\n</div>"}`);export{n as data};
