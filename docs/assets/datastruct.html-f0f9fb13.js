import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,f as t}from"./app-85378582.js";const e={},d=t(`<h1 id="redis-学习笔记" tabindex="-1"><a class="header-anchor" href="#redis-学习笔记" aria-hidden="true">#</a> Redis 学习笔记</h1><h2 id="数据结构与对象" tabindex="-1"><a class="header-anchor" href="#数据结构与对象" aria-hidden="true">#</a> 数据结构与对象</h2><h3 id="sds-简单动态字符串" tabindex="-1"><a class="header-anchor" href="#sds-简单动态字符串" aria-hidden="true">#</a> SDS(简单动态字符串)</h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><blockquote><p>SDS(简单动态字符串), 是对C语言字符串封装了一层</p></blockquote></div><p>举个例子</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set msg &quot;hello world&quot;
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Redis会新增一个键值对, 其中: 键值对键是保存msg的SDS, 值也是一个字符串对象SDS</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sdshdr</span> <span class="token punctuation">{</span>
<span class="token comment">//记录buf数组中已使用字节的数量  等于SDS所保存字符串的长度</span>
<span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token comment">//记录buf数组中未使用字节的数量</span>
<span class="token keyword">int</span> free<span class="token punctuation">;</span>
<span class="token comment">//字节数组，用于保存字符串</span>
<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中SDS保留了C字符串中最后一个字符是&#39;\\0&#39;的惯例, 目的是SDS可以直接重用C字符串函数库里的函数.</p><p>好处:</p><ol><li>因为SDS内部有个len属性, 所以如果想获取字符串长度就直接返回len, 时间复杂度是O(1), 但如果用原生strlen函数 时间复杂度就是O(n)了</li><li>SDS不会造成缓冲区溢出,因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题, 可以减少修改字符串带来的内存重分配次数,空间预分配:当append时当SDS长度小于1MB,则再多分配一倍的空间；若大于1MB, 则多分配1MB的空间；惰性空间释放, 当需要减少SDS的空间时, 不会立刻减少, 先更新free, 这样可以避免再次分配带来的性能损耗, 当然也有真正的释放内存空间的API.</li><li>SDS 不仅可以保存文本数据，还可以保存二进制数据。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。</li></ol><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h3><p>链表在Redis中的应用非常广泛，比如列表键的底层实现之一就是链表。当一个列表键包含了数量比较多的元素，又或者列表中包含的元素都是比较长的字符串时，Redis就会使用链表作为列表键的底层实现。</p><p>每个链表节点是</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span> prev<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>listNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多个listNode可以通过prev和next指针组成双端链表。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">{</span>
listNode <span class="token operator">*</span> head<span class="token punctuation">;</span>
listNode <span class="token operator">*</span> tail<span class="token punctuation">;</span>
<span class="token comment">// 链表所包含的节点数量</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>
<span class="token comment">// 节点值复制函数</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 节点值释放函数</span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 节点值对比函数</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> list<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链表的特性: 双端, 无环, 带表头指针和表尾指针, 带链表长度计数器</p><p>多态：链表节点使用void*指针来保存节点值，并且可以通过list结构的dup、free、match三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同类型的值。</p><h3 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h3><p>Redis的字典用哈希表来实现, 一个哈希表里面有多个哈希表节点, 而每个哈希表节点就保存了字典中的多个键值对</p><p>哈希表实现</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictht</span> <span class="token punctuation">{</span>
<span class="token comment">//哈希表数组</span>
dictEntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span>
<span class="token comment">//哈希表大小</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>
<span class="token comment">//哈希表大小掩码，用于计算索引值</span>
<span class="token comment">//总是等于size-1</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span>
<span class="token comment">//该哈希表已有节点的数量</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span>
<span class="token punctuation">}</span> dictht<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>table属性是一个数组,数组每个元素指向的是dictEntry结构的指针, 每个dictEntry结构都保存着一个键值对. size属性保存哈希表的大小, 就是table数目的大小 used保存总共的键值对个数 sizemask属性的值总是等于size-1，这个属性和哈希值一起决定一个键应该被放到table数组的哪个索引上面。</p><p>哈希节点</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token punctuation">{</span>
<span class="token comment">//键</span>
<span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>
<span class="token comment">//值</span>
<span class="token keyword">union</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>
    uint64_tu64<span class="token punctuation">;</span>
    int64_ts64<span class="token punctuation">;</span>
<span class="token punctuation">}</span> v<span class="token punctuation">;</span>
<span class="token comment">//指向下个哈希表节点，形成链表</span>
<span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> dictEntry<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>next是一个指针,这个指针可以将哈希值相同的键值对连接在一起, 来解决哈系碰撞问题.</p><p>字典实现</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">{</span>
<span class="token comment">//类型特定函数</span>
dictType <span class="token operator">*</span>type<span class="token punctuation">;</span>
<span class="token comment">//私有数据</span>
<span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">;</span>
<span class="token comment">//哈希表</span>
dictht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// rehash索引</span>
<span class="token comment">//当rehash 不在进行时，值为-1</span>
<span class="token keyword">int</span> rehashidx<span class="token punctuation">;</span> <span class="token comment">/* rehashing not in progress if rehashidx == -1 */</span>
<span class="token punctuation">}</span> dict<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>type属性和privdata属性是针对不同类型的键值对，为创建多态字典而设置的： type属性是一个指向dictType结构的指针，每个dictType结构保存了一簇用于操作特定类型键值对的函数，Redis会为用途不同的字典设置不同的类型特定函数</p><p>而privdata属性则保存了需要传给那些类型特定函数的可选参数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictType</span> <span class="token punctuation">{</span>
<span class="token comment">//计算哈希值的函数</span>
<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>hashFunction<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//复制键的函数</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>keyDup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//复制值的函数</span>
<span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>valDup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//对比键的函数</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyCompare<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//销毁键的函数</span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyDestructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//销毁值的函数</span>
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>valDestructor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> dictType<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ht 属 性 是 一 个 包 含 两 个 项 的 数 组 ， 数 组 中 的 每 个 项 都 是 一 个dictht哈希表，一般情况下，字典只使用ht[0]哈希表，ht[1]哈希表只会在对ht[0]哈希表进行rehash时使用。</p><p>除了ht[1]之外，另一个和rehash有关的属性就是rehashidx，它记录了rehash目前的进度，如果目前没有在进行rehash，那么它的值为-1。</p><p>rehash</p><p>当哈希表的负载因子不断变大, 就需要rehash 1）为字典的ht[1]哈希表分配空间，这个哈希表的空间大小取决于 要 执 行 的 操 作 ， 以 及 ht[0] 当 前 包 含 的 键 值 对 数 量 （ 也 即 是ht[0].used属性的值）：</p><ul><li>如果执行的是扩展操作，那么ht[1]的大小为第一个大于等于ht[0].used*2的2^n（2的n次方幂）；</li><li>如果执行的是收缩操作，那么ht[1]的大小为第一个大于等于ht[0].used的2^n。 2）将保存在ht[0]中的所有键值对rehash到ht[1]上面：rehash指的是重新计算键的哈希值和索引值，然后将键值对放置到ht[1]哈希表的指定位置上。</li></ul><p>哈希表的扩展与收缩</p><p>当以下条件中的任意一个被满足时，程序会自动开始对哈希表执行扩展操作：</p><p>1）服务器目前没有在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于1。 2）服务器目前正在执行BGSAVE命令或者BGREWRITEAOF命令，并且哈希表的负载因子大于等于5。</p><p>负载因子=哈希表已保存节点数量/哈希表大小 load_factor = ht[0].used / ht[0].size</p><p>当哈希表的负载因子小于0.1时，程序自动开始对哈希表执行收缩操作。</p><h4 id="渐进式rehash" tabindex="-1"><a class="header-anchor" href="#渐进式rehash" aria-hidden="true">#</a> 渐进式rehash</h4><p>当哈希表里的数据很多时, 一下子瞬间rehash可能导致性能问题, 所以redis采用渐进式rehash</p><div class="hint-container info"><p class="hint-container-title">rehash 过程</p><p>1）为ht[1]分配空间，让字典同时持有ht[0]和ht[1]两个哈希表。 2）在字典中维持一个索引计数器变量rehashidx，并将它的值设置为0，表示rehash工作正式开始。 3）在rehash进行期间，每次对字典执行添加、删除、查找或者更新操作时，程序除了执行指定的操作以外，还会顺带将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，当rehash工作完成之后，程序将rehashidx属性的值增一。 4）随着字典操作的不断执行，最终在某个时间点上，ht[0]的所有键值对都会被rehash至ht[1]，这时程序将rehashidx属性的值设为-1，表示rehash操作已完成。</p><p>因为在进行渐进式rehash的过程中，字典会同时使用ht[0]和ht[1] 两 个 哈 希 表 ， 所 以 在 渐 进 式 rehash 进 行 期 间 ， 字 典 的 删 除（delete）、查找（find）、更新（update）等操作会在两个哈希表上进行。例如，要在字典里面查找一个键的话，程序会先在ht[0]里面进行查找，如果没找到的话，就会继续到ht[1]里面进行查找，诸如此类。</p><p>另外，在渐进式rehash执行期间，新添加到字典的键值对一律会被保存到ht[1]里面，而ht[0]则不再进行任何添加操作，这一措施保证了ht[0]包含的键值对数量会只减不增，并随着rehash操作的执行而最终变成空表</p></div><h3 id="跳表" tabindex="-1"><a class="header-anchor" href="#跳表" aria-hidden="true">#</a> 跳表</h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>跳表是一个数据结构, 通过在每个节点内维持多个指向其他节点的指针, 从而达到快速访问节点的目的, 跳跃表支持平均O（logN）、最坏O（N）复杂度的节点查找，还可以通过顺序性操作来批量处理节点。</p></div><p>Redis只在两个地方用到了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构. 跳表节点的属性</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token punctuation">{</span>
<span class="token comment">//Zset 对象的元素值</span>
sds ele<span class="token punctuation">;</span>
<span class="token comment">//元素权重值</span>
<span class="token keyword">double</span> score<span class="token punctuation">;</span>
<span class="token comment">//后向指针</span>
<span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>backward<span class="token punctuation">;</span>
<span class="token comment">//节点的level数组，保存每层上的前向指针和跨度</span>
<span class="token keyword">struct</span> <span class="token class-name">zskiplistLevel</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>forward<span class="token punctuation">;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> span<span class="token punctuation">;</span>
<span class="token punctuation">}</span> level<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> zskiplistNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>level层, 指向多个元素, 每个元素都可以访问其他节点, 程序可以通过层快速定位元素每次创建一个新跳跃表节点的时候，程序都根据幂次定律随机生成一个介于1和32之间的值作为level数组的大小，这个大小就是层的“高度”。</p><p>前进指针, 每个层之间都有一个指向表尾方向的前进指针, 用于从表头向表尾方向遍历节点, 层的跨度span属性记录了两个节点之间的距离</p><p>跳表属性</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplist</span> <span class="token punctuation">{</span>
<span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>header<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span>
<span class="token keyword">unsigned</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span>
<span class="token keyword">int</span> level<span class="token punctuation">;</span>
<span class="token punctuation">}</span> zskiplist<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="整数集合" tabindex="-1"><a class="header-anchor" href="#整数集合" aria-hidden="true">#</a> 整数集合</h3><p>整数集合是集合键的实现之一, 当一个集合只包含整数值元素，并且这个集合的元素数量不多时，Redis就会使用整数集合作为集合键的底层实现。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">intset</span> <span class="token punctuation">{</span>
<span class="token comment">//编码方式</span>
<span class="token class-name">uint32_t</span> encoding<span class="token punctuation">;</span>
<span class="token comment">//集合包含的元素数量</span>
<span class="token class-name">uint32_t</span> length<span class="token punctuation">;</span>
<span class="token comment">//保存元素的数组</span>
<span class="token class-name">int8_t</span> contents<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> intset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整数集合（intset）是Redis用于保存整数值的集合抽象数据结构，它可以保存类型为int16_t、int32_t或者int64_t的整数值，并且保证集合中不会出现重复元素。</p><p>contents数组是整数集合的底层实现, 虽然intset结构将contents属性声明为int8_t类型的数组，但实际上contents数组并不保存任何int8_t类型的值，contents数组的真正类型取决于encoding属性的值：</p><p>encoding的属性有INTSET_ENC_INT16, INTSET_ENC_INT32, INTSET_ENC_INT64, 分别将contents的属性设置为int16_t, int32_t, int64_t</p><p>升级</p><p>每当我们要将一个新元素添加到整数集合里面，并且新元素的类型比整数集合现有所有元素的类型都要长时，整数集合需要先进行升级（upgrade），然后才能将新元素添加到整数集合里面。</p><p>因为引发升级的新元素的长度总是比整数集合现有所有元素的长度都大，所以这个新元素的值要么就大于所有现有元素，要么就小于所有现有元素：</p><ul><li>在新元素小于所有现有元素的情况下，新元素会被放置在底层数组的最开头（索引0）；</li><li>在新元素大于所有现有元素的情况下，新元素会被放置在底层数组的最末尾（索引length-1）。</li></ul><p>升级的好处:提升灵活性, 节省内存</p><p>不支持降级</p><h3 id="压缩列表" tabindex="-1"><a class="header-anchor" href="#压缩列表" aria-hidden="true">#</a> 压缩列表</h3><p>压缩列表是Redis为了节约内存而开发的，是由一系列特殊编码的连续内存块组成的顺序型（sequential）数据结构。一个压缩列表可以包含任意多个节点（entry），每个节点可以保存一个字节数组或者一个整数值。</p><p>压缩列表的组成</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>压缩列表在表头有三个字段：
zlbytes，记录整个压缩列表占⽤对内存字节数；
zltail，记录压缩列表「尾部」节点距离起始地址由多少字节，也就是列表尾的偏移量；
zllen，记录压缩列表包含的节点数量；
zlend，标记压缩列表的结束点，固定值 0xFF（⼗进制255）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在压缩列表中，如果我们要查找定位第⼀个元素和最后⼀个元素，可以通过表头三个字段的⻓度直接定位，复杂度是 O(1)。⽽查找其他元素时，就没有这么⾼效了，只能逐个查找，此时的复杂度就是 O(N)了，因此压缩列表不适合保存过多的元素</p><p>压缩列表节点包含三部分内容：prevlen，记录了「前⼀个节点」的⻓度；encoding，记录了当前节点实际数据的类型以及⻓度；data，记录了当前节点的实际数据；</p><p>连锁更新</p><p>压缩列表新增某个元素或修改某个元素时，如果空间不不够，压缩列表占⽤的内存空间就需要重新分配。⽽当新插⼊的元素较⼤时，可能会导致后续元素的 prevlen 占⽤空间都发⽣变化，从⽽引起「连锁更新」问题，导致每个元素的空间都要重新分配，造成访问压缩列表性能的下降。</p><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h3><p>Redis针对前面所说的类型建立了一个对象系统, 这个系列包括字符串对象、列表对象、哈希对象、集合对象和有序集合对象这五种类型的对象，每种对象都用到了至少一种我们前面所介绍的数据结构。</p><p>Redis的总对象类型是</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisObject</span> <span class="token punctuation">{</span>
<span class="token comment">//类型</span>
<span class="token keyword">unsigned</span> type<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token comment">//编码</span>
<span class="token keyword">unsigned</span> encoding<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
<span class="token comment">//指向底层实现数据结构的指针</span>
<span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">}</span> robj<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>type类型记录了对象的类型, 这个熟悉可以是REDIS_STRING, REDIS_LIST...</p><p>encoding属性记录了对象底层所使用的编码, 比如list的底层对象是list或者quicklist, hash的底层对象是ziplist或hash...</p><h2 id="_5种常见的数据类型" tabindex="-1"><a class="header-anchor" href="#_5种常见的数据类型" aria-hidden="true">#</a> 5种常见的数据类型</h2><h3 id="string内部实现" tabindex="-1"><a class="header-anchor" href="#string内部实现" aria-hidden="true">#</a> String内部实现</h3><p>String的内部实现是 SDS(简单动态字符串), 是对C语言字符串封装了一层</p><p>举个例子</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>set msg &quot;hello world&quot;
OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串对象的编码可以是int、raw或者embstr。</p><p>Redis会新增一个键值对, 其中: 键值对键是保存msg的SDS, 值也是一个字符串对象SDS</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>struct sdshdr {
//记录buf数组中已使用字节的数量  等于SDS所保存字符串的长度
int len;
//记录buf数组中未使用字节的数量
int free;
//字节数组，用于保存字符串
char buf[];
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中SDS保留了C字符串中最后一个字符是&#39;\\0&#39;的惯例, 目的是SDS可以直接重用C字符串函数库里的函数.</p><p>好处:</p><ol><li>因为SDS内部有个len属性, 所以如果想获取字符串长度就直接返回len, 时间复杂度是O(1), 但如果用原生strlen函数 时间复杂度就是O(n)了</li><li>SDS不会造成缓冲区溢出,因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题, 可以减少修改字符串带来的内存重分配次数,空间预分配:当append时当SDS长度小于1MB,则再多分配一倍的空间；若大于1MB, 则多分配1MB的空间；惰性空间释放, 当需要减少SDS的空间时, 不会立刻减少, 先更新free, 这样可以避免再次分配带来的性能损耗, 当然也有真正的释放内存空间的API.</li><li>SDS 不仅可以保存文本数据，还可以保存二进制数据。因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 buf[] 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。</li></ol><h4 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SET KEY VALUE</td><td>设置指定 KEY 的值</td></tr><tr><td>GET KEY</td><td>获取指定 KEY 的值</td></tr><tr><td>GETRANGE KEY start end</td><td>返回 KEY 中字符串值的子字符</td></tr><tr><td>GETSET KEY value</td><td>将给定 KEY 的值设为 value ，并返回 KEY 的旧值</td></tr><tr><td>GETBIT KEY offset</td><td>对 KEY 所储存的字符串值，获取指定偏移量上的位</td></tr><tr><td>MGET KEY1 [KEY2…]</td><td>获取所有(一个或多个)给定 KEY 的值</td></tr><tr><td>SETBIT KEY offset value</td><td>对 KEY 所储存的字符串值，设置或清除指定偏移量上的位</td></tr><tr><td>SETEX KEY seconds value</td><td>将值 value 关联到 KEY ，并将 KEY 的过期时间设为 seconds (以秒为单位)</td></tr><tr><td>SETNX KEY value</td><td>只有在 KEY 不存在时设置 KEY 的值</td></tr><tr><td>SETRANGE KEY offset value</td><td>用 value 参数覆写给定 KEY 所储存的字符串值，从偏移量 offset 开始</td></tr><tr><td>STRLEN KEY</td><td>返回 KEY 所储存的字符串值的长度</td></tr><tr><td>MSET KEY value KEY value …</td><td>同时设置一个或多个 KEY-value 对</td></tr><tr><td>MSETNX KEY value KEY value …</td><td>同时设置一个或多个 KEY-value 对，当且仅当所有给定 KEY 都不存在</td></tr><tr><td>PSETEX KEY milliseconds value</td><td>这个命令和 SETEX 命令相似，但它以毫秒为单位设置 KEY 的生存时间</td></tr><tr><td>INCR KEY</td><td>将 KEY 中储存的数字值增一</td></tr><tr><td>INCRBY KEY increment</td><td>将 KEY 所储存的值加上给定的增量值 increment</td></tr><tr><td>INCRBYFLOAT KEY increment</td><td>将 KEY 所储存的值加上给定的浮点增量值 increment</td></tr><tr><td>DECR KEY</td><td>将 KEY 中储存的数字值减一</td></tr><tr><td>DECRBY KEY decrement</td><td>KEY 所储存的值减去给定的减量值 decrement</td></tr><tr><td>APPEND KEY value</td><td>如果 KEY 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 KEY 原来值的末尾</td></tr><tr><td>BITCOUNT KEY START END</td><td>计算给定字符串中，被设置为 1 的比特位的数量</td></tr><tr><td>BITOP OPERATION DESTKEY KEY KEY …</td><td>对二进制位进行操作</td></tr></tbody></table><h3 id="list-类型内部实现" tabindex="-1"><a class="header-anchor" href="#list-类型内部实现" aria-hidden="true">#</a> List 类型内部实现</h3><p>List的内部实现是双向链表或者压缩列表</p><ul><li>如果列表的元素个数小于 512 个（默认值，可由 list-max-ziplist-entries 配置），列表每个元素的值都小于 64 字节（默认值，可由 list-max-ziplist-value 配置），Redis 会使用压缩列表作为 List 类型的底层数据结构；</li><li>如果列表的元素不满足上面的条件，Redis 会使用双向链表作为 List 类型的底层数据结构；</li></ul><p>但是在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表。</p><h4 id="命令-1" tabindex="-1"><a class="header-anchor" href="#命令-1" aria-hidden="true">#</a> 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>LPUSH KEY value1 value2</td><td>将一个或多个值插入到列表头部。</td></tr><tr><td>LPUSHX KEY value</td><td>将一个值插入到已存在的列表头部。</td></tr><tr><td>RPUSH KEY value1 value2</td><td>将一个或多个值插入到列表尾部。</td></tr><tr><td>RPUSHX KEY value</td><td>将一个值插入到已存在的列表尾部。</td></tr><tr><td>LSET KEY index value</td><td>将列表索引 index 位置的值设置为 value。</td></tr><tr><td>LINSERT KEY BEFORE AFTER pivot value</td><td>将值 value 插入到列表 KEY 当中，位于值 pivot 之前或之后。</td></tr><tr><td>LPOP KEY</td><td>获取并移除列表的第一个元素。</td></tr><tr><td>RPOP KEY</td><td>获取并移除列表的最后一个元素。</td></tr><tr><td>BLPOP KEY1 KEY2 timeout</td><td>获取并移除列表的第一个元素， 如果列表没有元素会阻塞列表直到超时或有元素可弹出为止。</td></tr><tr><td>BRPOP KEY1 KEY2 timeout</td><td>获取并移除列表的最后一个元素， 如果列表没有元素会阻塞列表直到超时或有元素可弹出为止。</td></tr><tr><td>RPOPLPUSH source destination</td><td>移除 source 列表的最后一个元素，并将该元素添加到另一个列表 destination 的开头并返回。</td></tr><tr><td>BRPOPLPUSH source destination timeout</td><td>1. BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本。2. 当 source 有数据时，BRPOPLPUSH 的表现与 RPOPLPUSH 完全一样。3. 当 source 是空时，会阻塞列表直到超时或有元素可弹出为止。</td></tr><tr><td>LLEN KEY</td><td>获取列表长度。</td></tr><tr><td>LINDEX KEY index</td><td>通过索引获取列表中的元素。</td></tr><tr><td>LREM KEY count value</td><td>从列表中移除 count 个值与 value 相等的元素。</td></tr><tr><td>LTRIM KEY start stop</td><td>对一个列表进行修剪(trim)，只保留列表中的 start 和 stop 之间的元素。</td></tr><tr><td>LRANGE KEY start stop</td><td>获取列表 start 和 stop 之间 的元素。</td></tr></tbody></table><h3 id="hash-类型内部实现" tabindex="-1"><a class="header-anchor" href="#hash-类型内部实现" aria-hidden="true">#</a> Hash 类型内部实现</h3><p>Hash 类型的底层数据结构是由压缩列表或哈希表实现的：</p><ul><li>如果哈希类型元素个数小于 512 个（默认值，可由 hash-max-ziplist-entries 配置），所有值小于 64 字节（默认值，可由 hash-max-ziplist-value 配置）的话，Redis 会使用压缩列表作为 Hash 类型的底层数据结构；</li><li>如果哈希类型元素不满足上面条件，Redis 会使用哈希表作为 Hash 类型的底层数据结构</li></ul><p>在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。</p><h4 id="命令-2" tabindex="-1"><a class="header-anchor" href="#命令-2" aria-hidden="true">#</a> 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>HSET KEY field value</td><td>将哈希表 KEY 中的字段 field 的值设为 value 。</td></tr><tr><td>HSETNX KEY field value</td><td>只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td>HMSET KEY field1 value1 field2 value2</td><td>同时将多个 field-value (域-值)对设置到哈希表 KEY 中。</td></tr><tr><td>HGET KEY field</td><td>获取存储在哈希表中指定字段的值。</td></tr><tr><td>HGETALL KEY</td><td>获取在哈希表中指定 KEY 的所有字段和值。</td></tr><tr><td>HMGET KEY field1 field2</td><td>获取所有给定字段的值。</td></tr><tr><td>HKEYS KEY</td><td>获取所有哈希表中的字段。</td></tr><tr><td>HVALS KEY</td><td>获取哈希表中所有值。</td></tr><tr><td>HLEN KEY</td><td>获取哈希表中字段的数量。</td></tr><tr><td>HINCRBY KEY field increment</td><td>为哈希表 KEY 中的指定字段的整数值加上增量 increment 。</td></tr><tr><td>HINCRBYFLOAT KEY field increment</td><td>为哈希表 KEY 中的指定字段的浮点数值加上增量 increment 。</td></tr><tr><td>HDEL KEY field1 field2</td><td>删除一个或多个哈希表字段。</td></tr><tr><td>HEXISTS KEY field</td><td>查看哈希表 KEY 中，指定的字段是否存在。</td></tr><tr><td>HSCAN KEY cursor [MATCH pattern] [COUNT count]</td><td>迭代哈希表中的键值对，类似 SCAN 命令。</td></tr></tbody></table><h3 id="set-类型内部实现" tabindex="-1"><a class="header-anchor" href="#set-类型内部实现" aria-hidden="true">#</a> Set 类型内部实现</h3><p>Set 类型的底层数据结构是由哈希表或整数集合实现的：</p><ul><li>如果集合中的元素都是整数且元素个数小于 512 （默认值，set-maxintset-entries配置）个，Redis 会使用整数集合作为 Set 类型的底层数据结构；</li><li>如果集合中的元素不满足上面条件，则 Redis 使用哈希表作为 Set 类型的底层数据结构。</li></ul><p>当以哈希表存储时, 值为空, key就是所有的set的值</p><h4 id="命令-3" tabindex="-1"><a class="header-anchor" href="#命令-3" aria-hidden="true">#</a> 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SADD key member1 member2</td><td>向集合添加一个或多个成员。</td></tr><tr><td>SCARD</td><td>key</td></tr><tr><td>SDIFF key1 key2</td><td>返回给定所有集合的差集。</td></tr><tr><td>SDIFFSTORE destination key1 key2</td><td>返回给定所有集合的差集并存储在 destination 中。</td></tr><tr><td>SINTER key1 key2</td><td>返回给定所有集合的交集。</td></tr><tr><td>SINTERSTORE destination key1 key2</td><td>返回给定所有集合的交集并存储在 destination 中。</td></tr><tr><td>SISMEMBER key member</td><td>判断 member 元素是否是集合 key 的成员。</td></tr><tr><td>SMEMBERS key</td><td>返回集合中的所有成员。</td></tr><tr><td>SMOVE source destination member</td><td>将 member 元素从 source 集合移动到 destination 集合。</td></tr><tr><td>SPOP key</td><td>移除并返回集合中的一个随机元素。</td></tr><tr><td>SRANDMEMBER key count</td><td>返回集合中一个或多个随机数。</td></tr><tr><td>SREM key member1 member2</td><td>移除集合中一个或多个成员。</td></tr><tr><td>SUNION key1 key2</td><td>返回所有给定集合的并集。</td></tr><tr><td>SUNIONSTORE destination key1 key2</td><td>所有给定集合的并集存储在 destination 集合中。</td></tr><tr><td>SSCAN key cursor MATCH pattern COUNT count</td><td>迭代集合中的元素。</td></tr></tbody></table><h3 id="zset-类型内部实现" tabindex="-1"><a class="header-anchor" href="#zset-类型内部实现" aria-hidden="true">#</a> ZSet 类型内部实现</h3><p>Zset 类型的底层数据结构是由压缩列表或跳表实现的：</p><ul><li>如果有序集合的元素个数小于 128 个，并且每个元素的值小于 64 字节时，Redis 会使用压缩列表作为 Zset 类型的底层数据结构；</li><li>如果有序集合的元素不满足上面的条件，Redis 会使用跳表作为 Zset 类型的底层数据结构；</li></ul><p>在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。</p><table><thead><tr><th>命令</th><th>- 描述</th></tr></thead><tbody><tr><td>ZADD KEY score1 member1 [score2 member2]</td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数。</td></tr><tr><td>ZCARD KEY</td><td>获取有序集合的成员数。</td></tr><tr><td>ZCOUNT KEY min max</td><td>计算在有序集合中指定区间分数的成员数。</td></tr><tr><td>ZINCRBY KEY increment member</td><td>有序集合中对指定成员的分数加上增量 increment 。</td></tr><tr><td>ZINTERSTORE destination num KEY [KEY …]</td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 KEY 中。</td></tr><tr><td>ZLEXCOUNT KEY min max</td><td>在有序集合中计算指定字典区间内成员数量。</td></tr><tr><td>ZRANGE KEY start stop [WITHSCORES]</td><td>通过索引区间返回有序集合成指定区间内的成员。</td></tr><tr><td>ZRANGEBYLEX KEY min max [LIMIT offset count]</td><td>通过字典区间返回有序集合的成员。</td></tr><tr><td>ZRANGEBYSCORE KEY min max [WITHSCORES] [LIMIT]</td><td>通过分数返回有序集合指定区间内的成员。</td></tr><tr><td>ZRANK KEY member</td><td>返回有序集合中指定成员的索引。</td></tr><tr><td>ZREM KEY member [member …]</td><td>移除有序集合中的一个或多个成员。</td></tr><tr><td>ZREMRANGEBYLEX KEY min max</td><td>移除有序集合中给定的字典区间的所有成员。</td></tr><tr><td>ZREMRANGEBYRANK KEY start stop</td><td>移除有序集合中给定的排名区间的所有成员。</td></tr><tr><td>ZREMRANGEBYSCORE KEY min max</td><td>移除有序集合中给定的分数区间的所有成员。</td></tr><tr><td>ZREVRANGE KEY start stop [WITHSCORES]</td><td>返回有序集中指定区间内的成员，通过索引，分数从高到底。</td></tr><tr><td>ZREVRANGEBYSCORE KEY max min [WITHSCORES]</td><td>返回有序集中指定分数区间内的成员，分数从高到低排序。</td></tr><tr><td>ZREVRANK KEY member</td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序。</td></tr><tr><td>ZSCORE KEY member</td><td>返回有序集中，成员的分数值。</td></tr><tr><td>ZUNIONSTORE destination numKEYs KEY [KEY …]</td><td>计算给定的一个或多个有序集的并集，并存储在新的 KEY 中。</td></tr><tr><td>ZSCAN KEY cursor [MATCH pattern] [COUNT count]</td><td>迭代有序集合中的元素（包括元素成员和元素分值）。</td></tr></tbody></table><h2 id="redis线程模型" tabindex="-1"><a class="header-anchor" href="#redis线程模型" aria-hidden="true">#</a> Redis线程模型</h2><p>Redis单线程指的是在接受客户端请求,解析请求,进行数据读写,发送给客户端这个过程是一个线程完成的</p><p>但是，Redis 程序并不是单线程的，Redis 在启动的时候，是会启动后台线程（BIO）的</p><ul><li>Redis 在 2.6 版本，会启动 2 个后台线程，分别处理关闭文件、AOF 刷盘这两个任务；</li><li>Redis 在 4.0 版本之后，新增了一个新的后台线程，用来异步释放 Redis 内存，也就是 lazyfree 线程。例如执行 unlink key / flushdb async / flushall async 等命令，会把这些删除操作交给后台线程来执行，好处是不会导致 Redis 主线程卡顿。因此，当我们要删除一个大 key 的时候，不要使用 del 命令删除，因为 del 是在主线程处理的，这样会导致 Redis 主线程卡顿，因此我们应该使用 unlink 命令来异步删除大key。</li></ul><p>之所以 Redis 为「关闭文件、AOF 刷盘、释放内存」这些任务创建单独的线程来处理，是因为这些任务的操作都是很耗时的，如果把这些任务都放在主线程来处理，那么 Redis 主线程就很容易发生阻塞，这样就无法处理后续的请求了。</p><p>后台线程相当于一个消费者，生产者把耗时任务丢到任务队列中，消费者（BIO）不停轮询这个队列，拿出任务就去执行对应的方法即可。</p><h2 id="redis-采用单线程为什么还这么快" tabindex="-1"><a class="header-anchor" href="#redis-采用单线程为什么还这么快" aria-hidden="true">#</a> Redis 采用单线程为什么还这么快？</h2><ul><li>Redis 的大部分操作都在内存中完成，并且采用了高效的数据结构，因此 Redis 瓶颈可能是机器的内存或者网络带宽，而并非 CPU，既然 CPU 不是瓶颈，那么自然就采用单线程的解决方案了；</li><li>Redis 采用单线程模型可以避免了多线程之间的竞争，省去了多线程切换带来的时间和性能上的开销，而且也不会导致死锁问题。</li><li>Redis 采用了 I/O 多路复用机制处理大量的客户端 Socket 请求，IO 多路复用机制是指一个线程处理多个 IO 流，就是我们经常听到的 select/epoll 机制。简单来说，在 Redis 只运行单线程的情况下，该机制允许内核中，同时存在多个监听 Socket 和已连接 Socket。内核会一直监听这些 Socket 上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。</li></ul><p>CPU 并不是制约 Redis 性能表现的瓶颈所在，更多情况下是受到内存大小和网络I/O的限制，所以 Redis 核心网络模型使用单线程并没有什么问题，如果你想要使用服务的多核CPU，可以在一台服务器上启动多个节点或者采用分片集群的方式。</p><p>除了上面的官方回答，选择单线程的原因也有下面的考虑。</p><p>使用了单线程后，可维护性高，多线程模型虽然在某些方面表现优异，但是它却引入了程序执行顺序的不确定性，带来了并发读写的一系列问题，增加了系统复杂度、同时可能存在线程切换、甚至加锁解锁、死锁造成的性能损耗。</p><p>在 Redis 6.0 版本之后，也采用了多个 I/O 线程来处理网络请求，这是因为随着网络硬件的性能提升，Redis 的性能瓶颈有时会出现在网络 I/O 的处理上。</p><p>所以为了提高网络 I/O 的并行度，Redis 6.0 对于网络 I/O 采用多线程来处理。但是对于命令的执行，Redis 仍然使用单线程来处理，所以大家不要误解 Redis 有多线程同时执行命令。</p><h2 id="redis持久化" tabindex="-1"><a class="header-anchor" href="#redis持久化" aria-hidden="true">#</a> Redis持久化</h2><p>Redis 如何实现数据不丢失？</p><ul><li>AOF 日志：每执行一条写操作命令，就把该命令以追加的方式写入到一个文件里；</li><li>RDB 快照：将某一时刻的内存数据，以二进制的方式写入磁盘；</li><li>混合持久化方式：Redis 4.0 新增的方式，集成了 AOF 和 RBD 的优点；</li></ul><p>AOF 日志是如何实现的？</p><p>Redis 在执行完一条写操作命令后，就会把该命令以追加的方式写入到一个文件里，然后 Redis 重启时，会读取该文件记录的命令，然后逐一执行命令的方式来进行数据恢复。</p><blockquote><p>为什么先执行命令，再把数据写入日志呢？</p></blockquote><ul><li>避免额外的检查开销：因为如果先将写操作命令记录到 AOF 日志里，再执行该命令的话，如果当前的命令语法有问题，那么如果不进行命令语法检查，该错误的命令记录到 AOF 日志里后，Redis 在使用日志恢复数据时，就可能会出错。</li><li>不会阻塞当前写操作命令的执行：因为当写操作命令执行成功后，才会将命令记录到 AOF 日志。</li></ul><p>当然，这样做也会带来风险：</p><ul><li>数据可能会丢失： 执行写操作命令和记录日志是两个过程，那当 Redis 在还没来得及将命令写入到硬盘时，服务器发生宕机了，这个数据就会有丢失的风险。</li><li>可能阻塞其他操作： 由于写操作命令执行成功后才记录到 AOF 日志，所以不会阻塞当前命令的执行，但因为 AOF 日志也是在主线程中执行，所以当 Redis 把日志文件写入磁盘的时候，还是会阻塞后续的操作无法执行。</li></ul><blockquote><p>AOF 写回策略有几种？</p></blockquote><ul><li>Always，这个单词的意思是「总是」，所以它的意思是每次写操作命令执行完后，同步将 AOF 日志数据写回硬盘；</li><li>Everysec，这个单词的意思是「每秒」，所以它的意思是每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，然后每隔一秒将缓冲区里的内容写回到硬盘；</li><li>No，意味着不由 Redis 控制写回硬盘的时机，转交给操作系统控制写回的时机，也就是每次写操作命令执行完后，先将命令写入到 AOF 文件的内核缓冲区，再由操作系统决定何时将缓冲区内容写回硬盘。</li></ul><blockquote><p>AOF 日志过大，会触发什么机制？</p></blockquote><p>Redis 为了避免 AOF 文件越写越大，提供了 AOF 重写机制，当 AOF 文件的大小超过所设定的阈值后，Redis 就会启用 AOF 重写机制，来压缩 AOF 文件。</p><blockquote><p>RDB 快照是如何实现的呢？</p></blockquote><p>因为 AOF 日志记录的是操作命令，不是实际的数据，所以用 AOF 方法做故障恢复时，需要全量把日志都执行一遍，一旦 AOF 日志非常多，势必会造成 Redis 的恢复操作缓慢。</p><p>为了解决这个问题，Redis 增加了 RDB 快照。所谓的快照，就是记录某一个瞬间东西，比如当我们给风景拍照时，那一个瞬间的画面和信息就记录到了一张照片。</p><p>所以，RDB 快照就是记录某一个瞬间的内存数据，记录的是实际数据，而 AOF 文件记录的是命令操作的日志，而不是实际的数据。</p><p>因此在 Redis 恢复数据时， RDB 恢复数据的效率会比 AOF 高些，因为直接将 RDB 文件读入内存就可以，不需要像 AOF 那样还需要额外执行操作命令的步骤才能恢复数据。</p><blockquote><p>RDB 做快照时会阻塞线程吗？</p></blockquote><p>Redis 提供了两个命令来生成 RDB 文件，分别是 save 和 bgsave，他们的区别就在于是否在「主线程」里执行：</p><ul><li>执行了 save 命令，就会在主线程生成 RDB 文件，由于和执行操作命令在同一个线程，所以如果写入 RDB 文件的时间太长，会阻塞主线程；</li><li>执行了 bgsave 命令，会创建一个子进程来生成 RDB 文件，这样可以避免主线程的阻塞；</li></ul><p>Redis 还可以通过配置文件的选项来实现每隔一段时间自动执行一次 bgsave 命令，默认会提供以下配置：</p><p>这里提一点，Redis 的快照是全量快照，也就是说每次执行快照，都是把内存中的「所有数据」都记录到磁盘中。所以执行快照是一个比较重的操作，如果频率太频繁，可能会对 Redis 性能产生影响。如果频率太低，服务器故障时，丢失的数据会更多。</p><blockquote><p>为什么会有混合持久化</p></blockquote><p>混合持久化优点：</p><div class="language-card line-numbers-mode" data-ext="card"><pre class="language-card"><code>混合持久化结合了 RDB 和 AOF 持久化的优点，开头为 RDB 的格式，使得 Redis 可以更快的启动
同时结合 AOF 的优点，有减低了大量数据丢失的风险。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>混合持久化缺点：</p><div class="language-card line-numbers-mode" data-ext="card"><pre class="language-card"><code>AOF 文件中添加了 RDB 格式的内容，使得 AOF 文件的可读性变得很差；
兼容性差，如果开启混合持久化，那么此混合持久化 AOF 文件，就不能用在 Redis 4.0 之前版本了。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,156),i=[d];function p(l,c){return n(),a("div",null,i)}const u=s(e,[["render",p],["__file","datastruct.html.vue"]]);export{u as default};
