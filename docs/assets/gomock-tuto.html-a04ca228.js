import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c,a as n,b as a,e as i,f as s}from"./app-9b617fb4.js";const l={},u=s(`<h1 id="gomock-教程" tabindex="-1"><a class="header-anchor" href="#gomock-教程" aria-hidden="true">#</a> GoMock 教程</h1><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>GoMock是go官方提供的一款Mock工具，方便开发人员模拟接口行为做测试的工具。</p><p>比如我们有一个Person接口下的Eat方法，我们就可以模拟这个接口</p></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>

mockPerson <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockPerson</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>

mockPerson<span class="token punctuation">.</span> <span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token function">Eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;lixin is sleep&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们就使用gomock创建一个mockPerson，去模拟person接口的行为 后续方便去做单测</p>`,4),d={class:"hint-container info"},r=n("p",{class:"hint-container-title"},"安装",-1),k={href:"https://github.com/golang/mock",target:"_blank",rel:"noopener noreferrer"},v=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go <span class="token function">install</span> github.com/golang/mock/mockgen@v1.6.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),m=s(`<p>输入mockgen查看是否下载在$GOPATH/bin 目录下</p><h2 id="基本用法步骤" tabindex="-1"><a class="header-anchor" href="#基本用法步骤" aria-hidden="true">#</a> 基本用法步骤</h2><p>首先选定一个mock的demo目录</p><p>比如说叫gomock-learn,然后在此目录下创建对应的mod，然后引入对应的gomock包</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> mod init gomock<span class="token operator">-</span>learn
<span class="token keyword">go</span> get github<span class="token punctuation">.</span>com<span class="token operator">/</span>golang<span class="token operator">/</span>mock 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来创建两个目录person和student分别用来放对应的接口和代码。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// person.go</span>
<span class="token keyword">package</span> person

<span class="token keyword">type</span> Person <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Eat</span><span class="token punctuation">(</span>food <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token function">Sleep</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// student.go</span>
<span class="token keyword">package</span> student

<span class="token keyword">import</span> <span class="token string">&quot;gomock-learn/person&quot;</span>

<span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	p    person<span class="token punctuation">.</span>Person
	Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Student<span class="token punctuation">)</span> <span class="token function">Eat</span><span class="token punctuation">(</span>food <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Student<span class="token punctuation">)</span> <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> p<span class="token punctuation">.</span>p<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着你要创建一个mocks目录，不然如果没有mock目录的话用mockgen命令行会失败</p><p>使用方法，直接在相应的目录下执行以下命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mockgen -destination mocks/mock_person.go -package=mocks gomock-learn/person Person
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里需要注意的是我们必须自己创建mocks目录因为GoMock不会自动帮我们创建，当它发现mocks目录不存在时会返回一个错误。以下是对mockgen命令参数的说明：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> -destination=mocks/mock_person.go：将自动生成的mock代码存储到文件mocks/mock_person.go中。-

package=mocks：将生成的mock代码放置到mocks包中。

gomock-learn/person：为这个包生成mock代码。

Person：为这个接口生成mock代码。这个参数是个必填参数，我们需要显式地指定要生成mock代码的接口。如果需要指定多个接口，可以将接口通过逗号连接起来，比如：Person1,Person2。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结合go-generate使用gomock" tabindex="-1"><a class="header-anchor" href="#结合go-generate使用gomock" aria-hidden="true">#</a> 结合go-generate使用GoMock</h2><p>在对应的借口前加入注释</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//go:generate mockgen -destination mocks/mock_person.go -package=mocks gomock-learn/person Person</span>

<span class="token keyword">type</span> Person <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Eat</span><span class="token punctuation">(</span>food <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
	<span class="token function">Sleep</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在对应的目录下输入</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">go</span> generate <span class="token punctuation">.</span><span class="token operator">/</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以发现就在对应的mocks目录下里有一个mock_xx.go函数，这个函数里面就是我们可以Mock的数据。</p><p>此时的目录是这样的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── go.mod
├── go.sum
├── mocks
│   └── mock_person.go
├── person
│   └── person.go
└── student
    ├── student.go
    └── student_test.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用参数匹配" tabindex="-1"><a class="header-anchor" href="#使用参数匹配" aria-hidden="true">#</a> 使用参数匹配</h2><p>有时候你可能不太确定调用mock时指定的参数，所以有一个对应的Matcher来代表一个mock方法可以接受的参数范围，比如gomock.Eq(x)指定传入值必须等于x。</p><p>以下是GoMock中一些预定义的matcher：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>    gomock<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：匹配任何类型的任何值
    gomock<span class="token punctuation">.</span><span class="token function">Eq</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>：匹配使用反射reflect<span class="token punctuation">.</span>DeepEqual与x相等的值gomock<span class="token punctuation">.</span><span class="token function">Nil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：匹配等于<span class="token boolean">nil</span>的值
    gomock<span class="token punctuation">.</span><span class="token function">Not</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>：（这里的m是一个Matcher）匹配同m不匹配的值
    gomock<span class="token punctuation">.</span><span class="token function">Not</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>：（这里的x不是Matcher）匹配使用反射reflect<span class="token punctuation">.</span>DeepEqual与x不相等的值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们希望第一个参数必须是x，那么我们就用</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>mockDoer<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DoSomething</span><span class="token punctuation">(</span>gomock<span class="token punctuation">.</span><span class="token function">Eq</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello GoMock&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>具体例子</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Test_Eat</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	mockPerson <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockPerson</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>

	mockPerson<span class="token punctuation">.</span>
		<span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">Eat</span><span class="token punctuation">(</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Times</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

	testStudent <span class="token operator">:=</span> Student<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;lixin&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> mockPerson<span class="token punctuation">}</span>
	testStudent<span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Test_Sleep</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	mockPerson <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockPerson</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>
	testStudent <span class="token operator">:=</span> Student<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;lixin&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> mockPerson<span class="token punctuation">}</span>

	mockPerson<span class="token punctuation">.</span>
		<span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token string">&quot;lixin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Return</span><span class="token punctuation">(</span><span class="token string">&quot;lixin is sleep&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s is sleep!\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> testStudent<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;lixin is sleep&quot;</span> <span class="token punctuation">{</span>
		t<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Error!!!!!&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="断言调用顺序" tabindex="-1"><a class="header-anchor" href="#断言调用顺序" aria-hidden="true">#</a> 断言调用顺序</h2><p>有时候我们期望控制一些mock流程的顺序，这里有一个例子调用After的方法</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Test_Eat</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	ctrl <span class="token operator">:=</span> gomock<span class="token punctuation">.</span><span class="token function">NewController</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
	mockPerson <span class="token operator">:=</span> mocks<span class="token punctuation">.</span><span class="token function">NewMockPerson</span><span class="token punctuation">(</span>ctrl<span class="token punctuation">)</span>

	first <span class="token operator">:=</span> mockPerson<span class="token punctuation">.</span><span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span>

	mockPerson<span class="token punctuation">.</span>
		<span class="token function">EXPECT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">Eat</span><span class="token punctuation">(</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
		<span class="token function">After</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>

	testStudent <span class="token operator">:=</span> Student<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;lixin&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">:</span> mockPerson<span class="token punctuation">}</span>
	testStudent<span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span>
	testStudent<span class="token punctuation">.</span><span class="token function">Eat</span><span class="token punctuation">(</span><span class="token string">&quot;Apple&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指定mock行为" tabindex="-1"><a class="header-anchor" href="#指定mock行为" aria-hidden="true">#</a> 指定mock行为</h2><p>比如说可以在执行完毕后加一个Do函数去做一些事情。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><div class="language-card line-numbers-mode" data-ext="card"><pre class="language-card"><code>安装
基本用法步骤
结合go-generate使用GoMock
使用参数匹配
断言调用顺序
指定mock的行为
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37);function g(b,f){const t=o("ExternalLinkIcon");return p(),c("div",null,[u,n("div",d,[r,n("p",null,[a("打开"),n("a",k,[a("https://github.com/golang/mock"),i(t)])]),v]),m])}const q=e(l,[["render",g],["__file","gomock-tuto.html.vue"]]);export{q as default};
