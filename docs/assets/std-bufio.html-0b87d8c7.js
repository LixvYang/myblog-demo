import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-eed3bdb5.js";const t={},o=e(`<h1 id="bufio-包详解" tabindex="-1"><a class="header-anchor" href="#bufio-包详解" aria-hidden="true">#</a> Bufio 包详解</h1><div class="hint-container info"><p class="hint-container-title">相关信息</p><p><code>bufio</code> 包是 Go 标准库中的一个包，提供了带缓冲的 I/O 操作，用于提高 I/O 的效率。它封装了 <code>io.Reader</code> 和 <code>io.Writer</code>，并提供了缓冲功能，可以减少系统调用次数，提高读写性能。</p></div><p>下面是对 <code>bufio</code> 包的详细介绍以及一些示例：</p><p><strong>创建缓冲读取器（<code>Scanner</code>）：</strong></p><ul><li><code>NewScanner()</code> 函数用于创建一个缓冲读取器，它从指定的 <code>io.Reader</code> 中读取数据。</li><li><code>Scanner</code> 类型提供了方便的方法来逐行或逐个词读取数据。</li><li>示例：<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>file<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">&quot;data.txt&quot;</span><span class="token punctuation">)</span>
scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>

<span class="token keyword">for</span> scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    line <span class="token operator">:=</span> scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> err <span class="token operator">:=</span> scanner<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>创建缓冲写入器（<code>Writer</code>）：</strong></p><ul><li><code>NewWriter()</code> 函数用于创建一个缓冲写入器，它将数据写入指定的 <code>io.Writer</code>。</li><li><code>Writer</code> 类型提供了 <code>Write()</code> 方法，用于将数据写入缓冲区，并在缓冲区满或显式刷新时将数据写入底层的 <code>io.Writer</code>。</li><li>示例：<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>file<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span>
writer <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>

text <span class="token operator">:=</span> <span class="token string">&quot;Hello, World!&quot;</span>
writer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 刷新缓冲区，确保所有数据被写入底层的文件</span>

file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><strong>创建带缓冲的读取器（<code>Reader</code>）：</strong></p><ul><li><code>NewReader()</code> 函数用于创建一个带缓冲的读取器，它从指定的 <code>io.Reader</code> 中读取数据并提供缓冲机制。</li><li><code>Reader</code> 类型提供了 <code>Read()</code> 方法，用于从缓冲区读取数据，并在缓冲区为空时填充缓冲区。</li><li>示例：<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span>
reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>

buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">{</span>
    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err <span class="token operator">!=</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Error:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span>
    <span class="token punctuation">}</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p><code>bufio</code> 包还提供了其他一些函数和类型，例如 <code>ReadString()</code>、<code>WriteString()</code>、<code>Scanner</code> 的定界符设定、更高级的缓冲写入器等。这些功能都可以帮助你更高效地进行 I/O 操作。</p><p>请注意，在使用完缓冲读取器或缓冲写入器后，务必调用 <code>Scanner</code>、<code>Writer</code> 或 <code>Reader</code> 的 <code>Flush()</code> 方法，以确保所有数据被写入或读取。</p><p>这是对 <code>bufio</code> 包的简要介绍和示例。使用 <code>bufio</code> 包可以提高 I/O 操作的效率，并简化对输入输出的处理。</p>`,12),p=[o];function c(i,l){return s(),a("div",null,p)}const d=n(t,[["render",c],["__file","std-bufio.html.vue"]]);export{d as default};
