import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as n,f as o}from"./app-85378582.js";const c={},i=o('<h1 id="go-context包详解" tabindex="-1"><a class="header-anchor" href="#go-context包详解" aria-hidden="true">#</a> Go Context包详解</h1><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>context 包定义了 Context 类型，它在 API 边界和进程之间传递截止时间、取消信号和其他与请求相关的值。</p></div><p>这样说可能你还是一脸懵。</p><div class="hint-container info"><p class="hint-container-title">举例</p><p>可以将 context 想象成传递信号的工具，类似于你向一个进程发送信号，告诉它该做什么或者取消它正在做的事情。</p><p>假设你是一名团队的领导，你负责协调团队中的各个成员完成任务。你希望每个成员都能在规定的时间内完成自己的任务，如果有需要的话，你还想提前告知他们任务的截止时间或者取消任务。在这种情况下，你可以使用 context 包来实现这些功能。</p></div><p>下面是一些示例，帮助你理解 context 包的基本概念和用法：</p><p>创建一个根上下文（Background Context）就像是你作为领导创建了一个规定了整个团队工作时间的时钟，每个人都应该在这个时间内完成自己的任务。你可以将根上下文视为一个默认的上下文，用于传递截止时间和取消信号。</p><p>使用 WithCancel、WithDeadline 或 WithTimeout 函数可以创建派生的上下文，就像你告知每个成员任务的截止时间，并提供一个按钮，让他们在时间到达之前取消任务。这些函数返回一个派生的上下文和一个取消函数，当调用取消函数时，任务将被取消。</p><p>在函数之间传递上下文，就像你将任务的要求和指示从一个人传递给另一个人，确保每个人都知道任务的要求和截止时间。</p><p>当一个上下文被取消时，所有从它派生的上下文也会被取消，就像当你决定取消整个团队的任务时，每个成员都会被告知任务取消，并停止执行。</p><p>使用 context 包有助于在并发环境中进行任务管理、传递请求的元数据和控制任务的生命周期。</p>',10),a=[i];function p(s,r){return e(),n("div",null,a)}const l=t(c,[["render",p],["__file","std-context.html.vue"]]);export{l as default};
