const t=JSON.parse('{"key":"v-5c52cbe4","path":"/posts/golang/std/std-context.html","title":"Go Context包详解","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2023-05-31T00:00:00.000Z","isOriginal":true,"category":["tutorial"],"tag":["golang"]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.87,"words":561},"filePathRelative":"posts/golang/std/std-context.md","localizedDate":"2023年5月31日","excerpt":"<h1> Go Context包详解</h1>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">相关信息</p>\\n<p>context 包定义了 Context 类型，它在 API 边界和进程之间传递截止时间、取消信号和其他与请求相关的值。</p>\\n</div>\\n<p>这样说可能你还是一脸懵。</p>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">举例</p>\\n<p>可以将 context 想象成传递信号的工具，类似于你向一个进程发送信号，告诉它该做什么或者取消它正在做的事情。</p>\\n<p>假设你是一名团队的领导，你负责协调团队中的各个成员完成任务。你希望每个成员都能在规定的时间内完成自己的任务，如果有需要的话，你还想提前告知他们任务的截止时间或者取消任务。在这种情况下，你可以使用 context 包来实现这些功能。</p>\\n</div>"}');export{t as data};
