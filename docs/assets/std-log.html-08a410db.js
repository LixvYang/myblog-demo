import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,b as s,e as l,f as a}from"./app-eed3bdb5.js";const i={},u=a(`<h1 id="log包详解" tabindex="-1"><a class="header-anchor" href="#log包详解" aria-hidden="true">#</a> Log包详解</h1><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>之前不知道在哪看到过一句话，一个程序员开始重视日志的时候才是这个程序员从程序员迈向工程师的时候。</p><p>在程序开发中，日志是一个非常重要的工具，它可以帮助我们记录和追踪程序的运行状态和错误信息。在Go语言中，log 包是一个基础的标准库，提供了许多日志相关的功能。本文将介绍 log 包的常用函数以及如何配置和使用日志。</p></div><h2 id="常用函数" tabindex="-1"><a class="header-anchor" href="#常用函数" aria-hidden="true">#</a> 常用函数</h2><p>log 包提供了一些常用的函数，可以方便地打印日志信息。这些函数包括 Print、Printf、Println、Fatal、Fatalf、Fatalln、Panic、Panicf 和 Panicln。它们的功能类似，区别在于添加换行符(ln)和是否触发程序的退出或崩溃。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Print</span><span class="token punctuation">(</span>v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">Printf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">Println</span><span class="token punctuation">(</span>v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">Fatal</span><span class="token punctuation">(</span>v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">Fatalf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">Fatalln</span><span class="token punctuation">(</span>v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">Panic</span><span class="token punctuation">(</span>v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">Panicf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">Panicln</span><span class="token punctuation">(</span>v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// demo</span>

<span class="token keyword">func</span> <span class="token function">printDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;Test Print&quot;</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Test Print&quot;</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Test Print&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
<span class="token number">2023</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">06</span> Test Print
<span class="token number">2023</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">06</span> Test Print
<span class="token number">2023</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">37</span><span class="token punctuation">:</span><span class="token number">06</span> Test Print
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="logger类型配置日志" tabindex="-1"><a class="header-anchor" href="#logger类型配置日志" aria-hidden="true">#</a> Logger类型配置日志</h2><p>其实整个log包内的这些函数都是由一个Logger类型配置的，默认情况下logger只会返回对应的日志的时间信息，如果我们想设置更多的信息，log包下有一些类型可以让我们自行配置：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	Ldate         <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span>     <span class="token comment">// the date in the local time zone: 2009/01/23</span>
	Ltime                         <span class="token comment">// the time in the local time zone: 01:23:23</span>
	Lmicroseconds                 <span class="token comment">// microsecond resolution: 01:23:23.123123.  assumes Ltime.</span>
	Llongfile                     <span class="token comment">// full file name and line number: /a/b/c/d.go:23</span>
	Lshortfile                    <span class="token comment">// final file name element and line number: d.go:23. overrides Llongfile</span>
	LUTC                          <span class="token comment">// if Ldate or Ltime is set, use UTC rather than the local time zone</span>
	Lmsgprefix                    <span class="token comment">// move the &quot;prefix&quot; from the beginning of the line to before the message</span>
	LstdFlags     <span class="token operator">=</span> Ldate <span class="token operator">|</span> Ltime <span class="token comment">// initial values for the standard logger</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认是LstdFlags，如果我们想配置别的类型只需要，使用SetFlags函数即可，比如Llongfile可以看到整个文件在系统中的位置。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Flags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> 
<span class="token keyword">func</span> <span class="token function">SetFlags</span><span class="token punctuation">(</span>flag <span class="token builtin">int</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置日志前缀" tabindex="-1"><a class="header-anchor" href="#配置日志前缀" aria-hidden="true">#</a> 配置日志前缀</h3><p>和flag一样，<code>log</code>标准库,也支持我们自行配置每行日志的前缀信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>func Prefix() string
func SetPrefix(prefix string)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Prefix函数可以让我们的到前缀是什么，比如下面这样:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">prefixDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	log<span class="token punctuation">.</span><span class="token function">SetPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;TestPrefix: &quot;</span><span class="token punctuation">)</span>

	log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;Test Print&quot;</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Test Print&quot;</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Test Print&quot;</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">Prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>

TestPrefix<span class="token punctuation">:</span> <span class="token number">2023</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">57</span> Test Print
TestPrefix<span class="token punctuation">:</span> <span class="token number">2023</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">57</span> Test Print
TestPrefix<span class="token punctuation">:</span> <span class="token number">2023</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">57</span> Test Print
TestPrefix<span class="token punctuation">:</span> <span class="token number">2023</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">57</span> TestPrefix<span class="token punctuation">:</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置日志输出位置" tabindex="-1"><a class="header-anchor" href="#配置日志输出位置" aria-hidden="true">#</a> 配置日志输出位置</h3><p>我们还可以通过log配置日志输出位置</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">SetOutput</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如我们可以打开一个<code>log.txt</code>文件来保存所有的日志信息，</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>logFile, err := os.OpenFile(&quot;./log.txt&quot;, os.O_CREATE|os.O_RDWR|os.O_APPEND, 0644)
	if err != nil {
		panic(err)
	}

	fmt.Println(log.Prefix())
	log.SetFlags(log.Llongfile | log.Lmicroseconds | log.Ldate)
	log.SetOutput(logFile)
	log.Println(&quot;Test&quot;)

// 输出在文件里的详细信息
2023/05/25 17:47:13.688674 /Users/lixin/xxx/test-std/test-log/log.go:24: Test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实你打开具体的SetOutput、SetPrefix、SetFlag这些函数，其实都是配置一个已经在log包下创建好的logger结构体。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// SetOutput函数</span>
<span class="token comment">// SetOutput sets the output destination for the standard logger.</span>
  <span class="token comment">// std 其实只是使用log包下New出来的一个 Logger实例</span>
<span class="token keyword">func</span> <span class="token function">SetOutput</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	std<span class="token punctuation">.</span><span class="token function">SetOutput</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> std <span class="token operator">=</span> <span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> LstdFlags<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),r={href:"https://github.com/MixinNetwork/mixin/blob/master/logger/log.go%E3%80%82",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="创建自己的logger" tabindex="-1"><a class="header-anchor" href="#创建自己的logger" aria-hidden="true">#</a> 创建自己的logger</h2><p>示例：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">newLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	logger <span class="token operator">:=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">&quot;&lt;Test Prefix&gt;&quot;</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>LstdFlags<span class="token punctuation">)</span>
	logger<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Test logger&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出</span>
<span class="token operator">&lt;</span>Test Prefix<span class="token operator">&gt;</span><span class="token number">2023</span><span class="token operator">/</span><span class="token number">05</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">17</span><span class="token punctuation">:</span><span class="token number">58</span><span class="token punctuation">:</span><span class="token number">35</span> Test logger
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><div class="hint-container info"><p class="hint-container-title">总结</p><p>log 包是Go语言官方提供的基础日志库，它提供了一些常用的函数和配置选项，可以方便地记录和输出日志信息。然而，它的功能相对简单，如果有更复杂的需求，我们可以选择使用其他成熟的日志库，例如 zap 等。无论使用何种日志库，重视日志的记录和分析对于程序开发和维护都是至关重要的。</p></div>`,5);function k(m,v){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("所以理论上我们也可以自己New出来一个Logger实例，然后让我们自己New出来的实例去打印日志，实际上许多项目就是这么做的，比如mixin的logger就是自己封装一个log，总共才70行的代码"),n("a",r,[s("https://github.com/MixinNetwork/mixin/blob/master/logger/log.go。"),l(e)])]),d])}const f=t(i,[["render",k],["__file","std-log.html.vue"]]);export{f as default};
